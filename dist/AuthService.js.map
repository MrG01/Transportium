{"version":3,"sources":["../Day 6/Assignment/js/AuthService.js"],"names":["AuthService","isAuthenticated","auth0","WebAuth","domain","AUTH_CONFIG","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","setSession","logout","authorize","parseHash","err","authResult","accessToken","idToken","console","log","alert","error","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","removeItem","userProfile","parse","getItem"],"mappings":"AAAA;;;;;;;AAEA;;;;;;;;;;IAEqBA,W;;;AAGjB,yBAAe;AAAA;;AAAA,2CAFC,KAAKC,eAAL,EAED;;AAAA,mCAOP,IAAIC,KAAK,CAACC,OAAV,CAAkB;AACtBC,MAAAA,MAAM,EAAEC,4BAAYD,MADE;AAEtBE,MAAAA,QAAQ,EAAED,4BAAYE,QAFA;AAGtBC,MAAAA,WAAW,EAAEH,4BAAYI,WAHH;AAItBC,MAAAA,YAAY,EAAE,gBAJQ;AAKtBC,MAAAA,KAAK,EAAE;AALe,KAAlB,CAPO;;AACX,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKZ,eAAL,GAAuB,KAAKA,eAAL,CAAqBY,IAArB,CAA0B,IAA1B,CAAvB;AACH;;;;4BAUQ;AACL,WAAKX,KAAL,CAAWc,SAAX;AACH;;;2CAEuB;AAAA;;AACpB,WAAKd,KAAL,CAAWe,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACtC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC5D,UAAA,KAAI,CAACP,UAAL,CAAgBK,UAAhB,EAD4D,CAE5D;;AACH,SAHD,MAGO,IAAID,GAAJ,EAAS;AACZI,UAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAM,UAAAA,KAAK,kBAAWN,GAAG,CAACO,KAAf,8CAAL;AACH;AACJ,OARD;AASH;;;+BAEWN,U,EAAY;AACpB;AACA,UAAIO,SAAS,GAAGC,IAAI,CAACC,SAAL,CACZT,UAAU,CAACU,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADlB,CAAhB;AAGAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCd,UAAU,CAACC,WAAhD;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCd,UAAU,CAACE,OAA5C;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC,EAPoB,CAQpB;AACH;;;6BAES;AACN;AACAM,MAAAA,YAAY,CAACE,UAAb,CAAwB,cAAxB;AACAF,MAAAA,YAAY,CAACE,UAAb,CAAwB,UAAxB;AACAF,MAAAA,YAAY,CAACE,UAAb,CAAwB,YAAxB;AACA,WAAKC,WAAL,GAAmB,IAAnB,CALM,CAMN;AACH;;;sCAEkB;AACf;AACA;AACA,UAAIT,SAAS,GAAGC,IAAI,CAACS,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,YAArB,CAAX,CAAhB;AACA,aAAO,IAAIP,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACH","sourcesContent":["\"use strict\";\n\nimport { AUTH_CONFIG } from './auth0-variables.js';\n\nexport default class AuthService {\n    authenticated = this.isAuthenticated();\n\n    constructor () {\n        this.login = this.login.bind(this);\n        this.setSession = this.setSession.bind(this)\n        this.logout = this.logout.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n    }\n\n    auth0 = new auth0.WebAuth({\n        domain: AUTH_CONFIG.domain,\n        clientID: AUTH_CONFIG.clientId,\n        redirectUri: AUTH_CONFIG.callbackUrl,\n        responseType: 'token id_token',\n        scope: 'openid'\n    })\n\n    login () {\n        this.auth0.authorize()\n    }\n\n    handleAuthentication () {\n        this.auth0.parseHash((err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult)\n                //router.replace('home')\n            } else if (err) {\n                console.log(err)\n                alert(`Error: ${err.error}. Check the console for further details.`)\n            }\n        })\n    }\n\n    setSession (authResult) {\n        // Set the time that the access token will expire at\n        let expiresAt = JSON.stringify(\n            authResult.expiresIn * 1000 + new Date().getTime()\n        )\n        localStorage.setItem('access_token', authResult.accessToken)\n        localStorage.setItem('id_token', authResult.idToken)\n        localStorage.setItem('expires_at', expiresAt)\n        //this.authNotifier.emit('authChange', { authenticated: true })\n    }\n\n    logout () {\n        // Clear access token and ID token from local storage\n        localStorage.removeItem('access_token')\n        localStorage.removeItem('id_token')\n        localStorage.removeItem('expires_at')\n        this.userProfile = null\n        //this.authNotifier.emit('authChange', false)\n    }\n\n    isAuthenticated () {\n        // Check whether the current time is past the\n        // access token's expiry time\n        let expiresAt = JSON.parse(localStorage.getItem('expires_at'))\n        return new Date().getTime() < expiresAt\n    }\n}"],"file":"AuthService.js"}